import pygame
import random

# Initialize pygame
pygame.init()

# Set up the game window
window_width = 800
window_height = 600
window = pygame.display.set_mode((window_width, window_height))
pygame.display.set_caption("Tetris")

# Define colors
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)
YELLOW = (255, 255, 0)
CYAN = (0, 255, 255)
MAGENTA = (255, 0, 255)
ORANGE = (255, 165, 0)

# Define block size and grid dimensions
block_size = 30
grid_width = window_width // block_size
grid_height = window_height // block_size

# Define the shapes of the Tetris blocks
shapes = [
    [[1, 1, 1, 1]],
    [[1, 1], [1, 1]],
    [[1, 1, 0], [0, 1, 1]],
    [[0, 1, 1], [1, 1, 0]],
    [[1, 1, 1], [0, 1, 0]],
    [[1, 1, 1], [1, 0, 0]],
    [[1, 1, 1], [0, 0, 1]]
]

# Define the colors of the Tetris blocks
colors = [RED, GREEN, BLUE, YELLOW, CYAN, MAGENTA, ORANGE]

# Define the Tetris block class
class Block:
    def __init__(self, shape, color):
        self.shape = shape
        self.color = color
        self.x = grid_width // 2 - len(shape[0]) // 2
        self.y = 0

    def move_down(self):
        self.y += 1

    def move_left(self):
        self.x -= 1

    def move_right(self):
        self.x += 1

    def rotate(self):
        self.shape = list(zip(*self.shape[::-1]))

    def draw(self):
        for row in range(len(self.shape)):
            for col in range(len(self.shape[0])):
                if self.shape[row][col]:
                    pygame.draw.rect(window, self.color, (self.x * block_size + col * block_size, self.y * block_size + row * block_size, block_size, block_size))

# Create a new block
current_block = Block(random.choice(shapes), random.choice(colors))

# Game loop
running = True
clock = pygame.time.Clock()
while running:
    clock.tick(10)  # Adjust the speed of the game here

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_LEFT:
                current_block.move_left()
            elif event.key == pygame.K_RIGHT:
                current_block.move_right()
            elif event.key == pygame.K_DOWN:
                current_block.move_down()
            elif event.key == pygame.K_UP:
                current_block.rotate()

    # Update game logic here

    # Clear the window
    window.fill(BLACK)

    # Draw the current block
    current_block.draw()

    # Update the display
    pygame.display.update()

# Quit the game
pygame.quit()